// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List    = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");

function indentLine(amount, line) {
  return " ".repeat(amount) + line;
}

function flatMap(list) {
  if (list) {
    var head = list[0];
    if (head) {
      return /* :: */[
              head[0],
              flatMap(list[1])
            ];
    } else {
      return /* [] */0;
    }
  } else {
    return /* [] */0;
  }
}

function join(sep, items) {
  return $$Array.of_list(items).join(sep);
}

function renderBinaryOperator(x) {
  switch (x) {
    case 0 : 
        return "===";
    case 1 : 
        return "!==";
    case 2 : 
        return ">";
    case 3 : 
        return ">=";
    case 4 : 
        return "<";
    case 5 : 
        return "<=";
    case 6 : 
        return "+";
    case 7 : 
        return "";
    
  }
}

function render(ast) {
  if (typeof ast === "number") {
    return /* [] */0;
  } else {
    switch (ast.tag | 0) {
      case 0 : 
          var items = render(ast[0]);
          var value = $$Array.of_list(items).join("");
          return /* :: */[
                  "return " + (String(value) + ";"),
                  /* [] */0
                ];
      case 1 : 
          return /* :: */[
                  JSON.stringify(ast[0][1]),
                  /* [] */0
                ];
      case 2 : 
          var path = ast[0];
          if (path) {
            return /* :: */[
                    List.fold_left((function (a, b) {
                            return a + ("." + b);
                          }), path[0], path[1]),
                    /* [] */0
                  ];
          } else {
            return /* [] */0;
          }
      case 3 : 
          var $$extends = ast[1];
          var name = ast[0];
          var decl = $$extends ? "class " + (String(name) + (" extends " + (String($$extends[0]) + " {"))) : "class " + (String(name) + " {");
          return List.flatten(/* :: */[
                      /* :: */[
                        decl,
                        /* [] */0
                      ],
                      /* :: */[
                        renderBody(ast[2]),
                        /* :: */[
                          /* :: */[
                            "};",
                            /* [] */0
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
      case 4 : 
          var parameterList = $$Array.of_list(ast[1]).join(", ");
          return List.flatten(/* :: */[
                      /* :: */[
                        "" + (String(ast[0]) + ("(" + (String(parameterList) + ") {"))),
                        /* [] */0
                      ],
                      /* :: */[
                        renderBody(ast[2]),
                        /* :: */[
                          /* :: */[
                            "};",
                            /* [] */0
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
      case 5 : 
          var items$1 = render(ast[0]);
          var value$1 = $$Array.of_list(items$1).join("");
          var items$2 = List.flatten(List.map(render, ast[1]));
          var parameterList$1 = $$Array.of_list(items$2).join(", ");
          return /* :: */[
                  "" + (String(value$1) + ("(" + (String(parameterList$1) + ")"))),
                  /* [] */0
                ];
      case 6 : 
          var items$3 = render(ast[1]);
          var value$2 = $$Array.of_list(items$3).join("");
          return /* :: */[
                  "" + (String(ast[0]) + ("={" + (String(value$2) + "}"))),
                  /* [] */0
                ];
      case 7 : 
          var attributes = ast[1];
          var tag = ast[0];
          var opening;
          if (attributes) {
            var items$4 = List.flatten(List.map(render, attributes));
            var attributes$1 = $$Array.of_list(items$4).join(" ");
            opening = $$Array.of_list(/* :: */[
                    tag,
                    /* :: */[
                      attributes$1,
                      /* [] */0
                    ]
                  ]).join(" ");
          } else {
            opening = tag;
          }
          return List.flatten(/* :: */[
                      /* :: */[
                        "<" + (String(opening) + ">"),
                        /* [] */0
                      ],
                      /* :: */[
                        renderBody(ast[2]),
                        /* :: */[
                          /* :: */[
                            "</" + (String(tag) + ">"),
                            /* [] */0
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
      case 8 : 
          var items$5 = render(ast[0]);
          var value$3 = $$Array.of_list(items$5).join("");
          return /* :: */[
                  "let " + (String(value$3) + ";"),
                  /* [] */0
                ];
      case 9 : 
          var items$6 = render(ast[0]);
          var name$1 = $$Array.of_list(items$6).join("");
          var items$7 = render(ast[1]);
          var value$4 = $$Array.of_list(items$7).join("");
          return /* :: */[
                  "" + (String(name$1) + (" = " + (String(value$4) + ""))),
                  /* [] */0
                ];
      case 10 : 
          var items$8 = render(ast[0]);
          var lhs = $$Array.of_list(items$8).join("");
          var items$9 = render(ast[2]);
          var rhs = $$Array.of_list(items$9).join("");
          var cmp = renderBinaryOperator(ast[1]);
          return /* :: */[
                  "" + (String(lhs) + (" " + (String(cmp) + (" " + (String(rhs) + ""))))),
                  /* [] */0
                ];
      case 11 : 
          var items$10 = render(ast[0]);
          var condition = $$Array.of_list(items$10).join("");
          var body = renderBody(ast[1]);
          return List.flatten(/* :: */[
                      /* :: */[
                        "if (" + (String(condition) + ") {"),
                        /* [] */0
                      ],
                      /* :: */[
                        body,
                        /* :: */[
                          /* :: */[
                            "}",
                            /* [] */0
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
      case 12 : 
          var body$1 = ast[0];
          if (body$1) {
            var items$11 = List.flatten(List.map(render, body$1));
            var body$2 = $$Array.of_list(items$11).join(", ");
            return /* :: */[
                    "[ " + (String(body$2) + " ]"),
                    /* [] */0
                  ];
          } else {
            return /* :: */[
                    "[]",
                    /* [] */0
                  ];
          }
          break;
      case 13 : 
          var body$3 = ast[0];
          if (body$3) {
            var items$12 = List.flatten(List.map(render, body$3));
            var body$4 = $$Array.of_list(items$12).join(", ");
            return /* :: */[
                    "{ " + (String(body$4) + " }"),
                    /* [] */0
                  ];
          } else {
            return /* :: */[
                    "{}",
                    /* [] */0
                  ];
          }
          break;
      case 14 : 
          var items$13 = render(ast[0]);
          var name$2 = $$Array.of_list(items$13).join("");
          var items$14 = render(ast[1]);
          var value$5 = $$Array.of_list(items$14).join("");
          return /* :: */[
                  "" + (String(name$2) + (": " + (String(value$5) + ""))),
                  /* [] */0
                ];
      case 15 : 
      case 16 : 
          return List.flatten(List.map(render, ast[0]));
      
    }
  }
}

function renderBody(body) {
  return List.map((function (param) {
                return indentLine(2, param);
              }), List.flatten(List.map(render, body)));
}

function toString(ast) {
  var items = render(ast);
  return $$Array.of_list(items).join("\n");
}

function log(ast) {
  var items = render(ast);
  console.log($$Array.of_list(items).join("\n"));
  return /* () */0;
}

var JavaScript = /* module */[
  /* renderBinaryOperator */renderBinaryOperator,
  /* render */render,
  /* renderBody */renderBody,
  /* toString */toString,
  /* log */log
];

exports.indentLine = indentLine;
exports.flatMap    = flatMap;
exports.join       = join;
exports.JavaScript = JavaScript;
/* No side effect */
