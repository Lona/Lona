// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                      = require("bs-platform/lib/js/list.js");
var $$Array                   = require("bs-platform/lib/js/array.js");
var Curry                     = require("bs-platform/lib/js/curry.js");
var Prettier                  = require("prettier");
var Pervasives                = require("bs-platform/lib/js/pervasives.js");
var Css$LonaCompilerCore      = require("./css.bs.js");
var Prettier$LonaCompilerCore = require("./prettier.bs.js");

function indentLine(amount, line) {
  return " ".repeat(amount) + line;
}

function flatMap(list) {
  if (list) {
    var head = list[0];
    if (head) {
      return /* :: */[
              head[0],
              flatMap(list[1])
            ];
    } else {
      return /* [] */0;
    }
  } else {
    return /* [] */0;
  }
}

function join(sep, items) {
  return $$Array.of_list(items).join(sep);
}

var $$String = /* module */[/* join */join];

function prefixAll(sep, items) {
  return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
              sep,
              /* :: */[
                Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], sep, items),
                /* [] */0
              ]
            ]);
}

function renderFloat(value) {
  var string = Pervasives.string_of_float(value);
  var match = +string.endsWith(".");
  return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], match !== 0 ? string.slice(0, -1) : string);
}

function renderAccessLevelModifier(node) {
  switch (node) {
    case 0 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "private");
    case 1 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "fileprivate");
    case 2 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "internal");
    case 3 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "public");
    case 4 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "open");
    
  }
}

function renderMutationModifier(node) {
  if (node !== 0) {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "nonmutating");
  } else {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "mutating");
  }
}

function renderDeclarationModifier(node) {
  if (typeof node === "number") {
    switch (node) {
      case 0 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "class");
      case 1 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "convenience");
      case 2 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "dynamic");
      case 3 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "final");
      case 4 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "infix");
      case 5 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "lazy");
      case 6 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "optional");
      case 7 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "override");
      case 8 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "postfix");
      case 9 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "prefix");
      case 10 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "required");
      case 11 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "static");
      case 12 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "unowned");
      case 13 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "unownedsafe");
      case 14 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "unownedunsafe");
      case 15 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "weak");
      
    }
  } else if (node.tag) {
    return renderMutationModifier(node[0]);
  } else {
    return renderAccessLevelModifier(node[0]);
  }
}

function render(ast) {
  switch (ast.tag | 0) {
    case 0 : 
        return renderLiteral(ast[0]);
    case 1 : 
        var o = ast[0];
        var opening = Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "class"),
                  /* :: */[
                    Prettier.doc.builders.line,
                    /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o.name),
                      /* :: */[
                        Prettier.doc.builders.line,
                        /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]));
        var closing = Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
              Prettier.doc.builders.hardline,
              /* :: */[
                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                /* [] */0
              ]
            ]);
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                    opening,
                    /* :: */[
                      Prettier.doc.builders.indent(prefixAll(Prettier.doc.builders.hardline, List.map(render, o.body))),
                      /* :: */[
                        closing,
                        /* [] */0
                      ]
                    ]
                  ]);
    case 2 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[0]);
    case 3 : 
        var o$1 = ast[0];
        var modifiers = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "), List.map(renderDeclarationModifier, o$1.modifiers));
        var match = +(o$1.init === /* None */0);
        var maybeInit = match !== 0 ? Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "") : Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " = "),
                /* :: */[
                  renderOptional(o$1.init),
                  /* [] */0
                ]
              ]);
        var parts_001 = /* :: */[
          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "),
          /* :: */[
            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "let"),
            /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "),
              /* :: */[
                renderPattern(o$1.pattern),
                /* :: */[
                  maybeInit,
                  /* [] */0
                ]
              ]
            ]
          ]
        ];
        var parts = /* :: */[
          modifiers,
          parts_001
        ];
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], parts));
    case 4 : 
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "import"),
                        /* :: */[
                          Prettier.doc.builders.line,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[0]),
                            /* [] */0
                          ]
                        ]
                      ]));
    case 5 : 
        var o$2 = ast[0];
        var match$1 = o$2.name;
        if (match$1) {
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                          render(match$1[0]),
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ":"),
                            /* :: */[
                              Prettier.doc.builders.line,
                              /* :: */[
                                render(o$2.value),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]));
        } else {
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                          render(o$2.value),
                          /* [] */0
                        ]));
        }
    case 6 : 
        var o$3 = ast[0];
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                        render(o$3.name),
                        /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                          /* :: */[
                            Prettier.doc.builders.indent(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                                      Prettier.doc.builders.softline,
                                      /* :: */[
                                        Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                                                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ","),
                                                  /* :: */[
                                                    Prettier.doc.builders.line,
                                                    /* [] */0
                                                  ]
                                                ]), List.map(render, o$3.arguments)),
                                        /* [] */0
                                      ]
                                    ])),
                            /* :: */[
                              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]));
    case 7 : 
        var o$4 = ast[0];
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                    render(o$4.line),
                    /* :: */[
                      Prettier.doc.builders.lineSuffix(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " // " + o$4.comment)),
                      /* [] */0
                    ]
                  ]);
    case 8 : 
        return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                        Prettier.doc.builders.hardline,
                        /* :: */[
                          Prettier.doc.builders.hardline,
                          /* [] */0
                        ]
                      ]), List.map(render, ast[0].statements));
    
  }
}

function renderLiteral(node) {
  if (typeof node === "number") {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "nil");
  } else {
    switch (node.tag | 0) {
      case 0 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], node[0] !== 0 ? "true" : "false");
      case 1 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], Pervasives.string_of_int(node[0]));
      case 2 : 
          return renderFloat(node[0]);
      case 3 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "\""),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], node[0]),
                        /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "\""),
                          /* [] */0
                        ]
                      ]
                    ]);
      case 4 : 
          var rgba = Css$LonaCompilerCore.parseColorDefault("black", node[0]);
          var values_000 = Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "red: "),
                /* :: */[
                  renderFloat(rgba[/* r */0] / 255.0),
                  /* [] */0
                ]
              ]);
          var values_001 = /* :: */[
            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "green: "),
                  /* :: */[
                    renderFloat(rgba[/* g */1] / 255.0),
                    /* [] */0
                  ]
                ]),
            /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "blue: "),
                    /* :: */[
                      renderFloat(rgba[/* b */2] / 255.0),
                      /* [] */0
                    ]
                  ]),
              /* :: */[
                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "alpha: "),
                      /* :: */[
                        renderFloat(rgba[/* a */3]),
                        /* [] */0
                      ]
                    ]),
                /* [] */0
              ]
            ]
          ];
          var values = /* :: */[
            values_000,
            values_001
          ];
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "#colorLiteral("),
                      /* :: */[
                        Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ", "), values),
                        /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                          /* [] */0
                        ]
                      ]
                    ]);
      
    }
  }
}

function renderTypeAnnotation(node) {
  switch (node.tag | 0) {
    case 0 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], node[0]);
    case 1 : 
        var o = node[0];
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                        renderTypeAnnotation(o.name),
                        /* :: */[
                          Prettier.doc.builders.line,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "."),
                            /* :: */[
                              Prettier.doc.builders.line,
                              /* :: */[
                                renderTypeAnnotation(o.member),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]));
    case 2 : 
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "["),
                        /* :: */[
                          renderTypeAnnotation(node[0].element),
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "]"),
                            /* [] */0
                          ]
                        ]
                      ]));
    case 3 : 
        var o$1 = node[0];
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "["),
                        /* :: */[
                          renderTypeAnnotation(o$1.key),
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ": "),
                            /* :: */[
                              renderTypeAnnotation(o$1.value),
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "]"),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]));
    case 4 : 
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                        renderTypeAnnotation(node[0].value),
                        /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "?"),
                          /* [] */0
                        ]
                      ]));
    case 5 : 
        return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ", "), List.map(renderTypeAnnotation, node[0].list)));
    
  }
}

function renderPattern(node) {
  if (typeof node === "number") {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "_");
  } else {
    switch (node.tag | 0) {
      case 0 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], node[0]);
      case 1 : 
          var o = node[0];
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o.kind),
                          /* :: */[
                            Prettier.doc.builders.line,
                            /* :: */[
                              renderPattern(o.pattern),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 2 : 
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                          /* :: */[
                            Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ", "), List.map(renderPattern, node[0].elements)),
                            /* :: */[
                              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 3 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                      renderPattern(node[0].value),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "?"),
                        /* [] */0
                      ]
                    ]);
      case 4 : 
          return render(node[0].value);
      
    }
  }
}

function renderOptional(ast) {
  if (ast) {
    return render(ast[0]);
  } else {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "");
  }
}

function toString(ast) {
  var doc = render(ast);
  var printerOptions = {
    printWidth: 120,
    tabWidth: 2,
    useTabs: /* false */0
  };
  return Prettier.doc.printer.printDocToString(doc, printerOptions).formatted;
}

var Swift = /* module */[
  /* renderFloat */renderFloat,
  /* renderAccessLevelModifier */renderAccessLevelModifier,
  /* renderMutationModifier */renderMutationModifier,
  /* renderDeclarationModifier */renderDeclarationModifier,
  /* render */render,
  /* renderLiteral */renderLiteral,
  /* renderTypeAnnotation */renderTypeAnnotation,
  /* renderPattern */renderPattern,
  /* renderOptional */renderOptional,
  /* toString */toString
];

function renderBinaryOperator(x) {
  var tmp;
  switch (x) {
    case 0 : 
        tmp = "===";
        break;
    case 1 : 
        tmp = "!==";
        break;
    case 2 : 
        tmp = ">";
        break;
    case 3 : 
        tmp = ">=";
        break;
    case 4 : 
        tmp = "<";
        break;
    case 5 : 
        tmp = "<=";
        break;
    case 6 : 
        tmp = "+";
        break;
    case 7 : 
        tmp = "";
        break;
    
  }
  return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], tmp);
}

function render$1(ast) {
  if (typeof ast === "number") {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "");
  } else {
    switch (ast.tag | 0) {
      case 0 : 
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                          Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "return"),
                                    /* :: */[
                                      Prettier.doc.builders.line,
                                      /* :: */[
                                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                                        /* [] */0
                                      ]
                                    ]
                                  ])),
                          /* :: */[
                            Prettier.doc.builders.indent(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                                      Prettier.doc.builders.line,
                                      /* :: */[
                                        render$1(ast[0]),
                                        /* [] */0
                                      ]
                                    ])),
                            /* :: */[
                              Prettier.doc.builders.line,
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ");"),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]));
      case 1 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], JSON.stringify(ast[0][1]));
      case 2 : 
          return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                              Prettier.doc.builders.softline,
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "."),
                                /* [] */0
                              ]
                            ]), List.map(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[0])));
      case 3 : 
          var $$extends = ast[1];
          var name = ast[0];
          var decl = $$extends ? /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "class"),
              /* :: */[
                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], name),
                /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "extends"),
                  /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], $$extends[0]),
                    /* [] */0
                  ]
                ]
              ]
            ] : /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "class"),
              /* :: */[
                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], name),
                /* [] */0
              ]
            ];
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                      Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                                Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Prettier.doc.builders.line, decl),
                                /* :: */[
                                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " {"),
                                  /* [] */0
                                ]
                              ])),
                      /* :: */[
                        Prettier.doc.builders.indent(prefixAll(Prettier.doc.builders.hardline, List.map(render$1, ast[2]))),
                        /* :: */[
                          Prettier.doc.builders.hardline,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "};"),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      case 4 : 
          var parameterList = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Prettier.doc.builders.line, List.map(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[1]));
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                      Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[0]),
                                /* :: */[
                                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                                  /* :: */[
                                    parameterList,
                                    /* :: */[
                                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                                      /* :: */[
                                        Prettier.doc.builders.line,
                                        /* :: */[
                                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ])),
                      /* :: */[
                        Prettier.doc.builders.indent(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Prettier.doc.builders.hardline, List.map(render$1, ast[2]))),
                        /* :: */[
                          Prettier.doc.builders.line,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      case 5 : 
          var parameterList$1 = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ", "), List.map(render$1, ast[1]));
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* fill */2], /* :: */[
                      render$1(ast[0]),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                        /* :: */[
                          parameterList$1,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      case 6 : 
          var value = render$1(ast[1]);
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[0]),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "={"),
                        /* :: */[
                          value,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      case 7 : 
          var tag = ast[0];
          var openingContent = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Prettier.doc.builders.line, List.map(render$1, ast[1]));
          var opening = Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "<"),
                    /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], tag),
                      /* :: */[
                        Prettier.doc.builders.indent(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                                  Prettier.doc.builders.line,
                                  /* :: */[
                                    openingContent,
                                    /* [] */0
                                  ]
                                ])),
                        /* :: */[
                          Prettier.doc.builders.softline,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ">"),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]));
          var closing = Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "</"),
                    /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], tag),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ">"),
                        /* [] */0
                      ]
                    ]
                  ]));
          var children = Prettier.doc.builders.indent(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                    Prettier.doc.builders.line,
                    /* :: */[
                      Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Prettier.doc.builders.line, List.map(render$1, ast[2])),
                      /* [] */0
                    ]
                  ]));
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                      opening,
                      /* :: */[
                        children,
                        /* :: */[
                          Prettier.doc.builders.line,
                          /* :: */[
                            closing,
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      case 8 : 
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "let "),
                          /* :: */[
                            render$1(ast[0]),
                            /* :: */[
                              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ";"),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 9 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* fill */2], /* :: */[
                      Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                                render$1(ast[0]),
                                /* :: */[
                                  Prettier.doc.builders.line,
                                  /* :: */[
                                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "="),
                                    /* [] */0
                                  ]
                                ]
                              ])),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "),
                        /* :: */[
                          render$1(ast[1]),
                          /* [] */0
                        ]
                      ]
                    ]);
      case 10 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                      render$1(ast[0]),
                      /* :: */[
                        renderBinaryOperator(ast[1]),
                        /* :: */[
                          render$1(ast[2]),
                          /* [] */0
                        ]
                      ]
                    ]);
      case 11 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                      Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "if"),
                                /* :: */[
                                  Prettier.doc.builders.line,
                                  /* :: */[
                                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                                    /* :: */[
                                      Prettier.doc.builders.softline,
                                      /* :: */[
                                        render$1(ast[0]),
                                        /* :: */[
                                          Prettier.doc.builders.softline,
                                          /* :: */[
                                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                                            /* :: */[
                                              Prettier.doc.builders.line,
                                              /* :: */[
                                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ])),
                      /* :: */[
                        Prettier.doc.builders.indent(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Prettier.doc.builders.hardline, List.map(render$1, ast[1]))),
                        /* :: */[
                          Prettier.doc.builders.hardline,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      case 12 : 
          var body = ast[0];
          var match = +(List.length(body) > 0);
          var maybeLine = match !== 0 ? Prettier.doc.builders.line : Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "");
          var body$1 = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ","),
                    /* :: */[
                      Prettier.doc.builders.line,
                      /* [] */0
                    ]
                  ]), List.map(render$1, body));
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "["),
                          /* :: */[
                            Prettier.doc.builders.indent(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                                      maybeLine,
                                      /* :: */[
                                        body$1,
                                        /* [] */0
                                      ]
                                    ])),
                            /* :: */[
                              maybeLine,
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "]"),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]));
      case 13 : 
          var body$2 = ast[0];
          var match$1 = +(List.length(body$2) > 0);
          var maybeLine$1 = match$1 !== 0 ? Prettier.doc.builders.line : Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "");
          var body$3 = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ","),
                    /* :: */[
                      Prettier.doc.builders.line,
                      /* [] */0
                    ]
                  ]), List.map(render$1, body$2));
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                          /* :: */[
                            Prettier.doc.builders.indent(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                                      maybeLine$1,
                                      /* :: */[
                                        body$3,
                                        /* [] */0
                                      ]
                                    ])),
                            /* :: */[
                              maybeLine$1,
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]));
      case 14 : 
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                          render$1(ast[0]),
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ": "),
                            /* :: */[
                              render$1(ast[1]),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 15 : 
          return prefixAll(Prettier.doc.builders.hardline, List.map(render$1, ast[0]));
      case 16 : 
          return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */3], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */1], /* :: */[
                          Prettier.doc.builders.hardline,
                          /* :: */[
                            Prettier.doc.builders.hardline,
                            /* [] */0
                          ]
                        ]), List.map(render$1, ast[0]));
      
    }
  }
}

function toString$1(ast) {
  var doc = render$1(ast);
  var printerOptions = {
    printWidth: 80,
    tabWidth: 2,
    useTabs: /* false */0
  };
  return Prettier.doc.printer.printDocToString(doc, printerOptions).formatted;
}

var JavaScript = /* module */[
  /* renderBinaryOperator */renderBinaryOperator,
  /* render */render$1,
  /* toString */toString$1
];

exports.indentLine = indentLine;
exports.flatMap    = flatMap;
exports.$$String   = $$String;
exports.prefixAll  = prefixAll;
exports.Swift      = Swift;
exports.JavaScript = JavaScript;
/* prettier Not a pure module */
