// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs                      = require("fs");
var List                    = require("bs-platform/lib/js/list.js");
var Block                   = require("bs-platform/lib/js/block.js");
var Json_decode             = require("bs-json/src/Json_decode.js");
var Render$LonaCompilerCore = require("./render.bs.js");

function parseFile(filename) {
  var content = Fs.readFileSync(filename, "utf8");
  var parsed = JSON.parse(content);
  var parseColor = function (json) {
    return /* record */[
            /* id */Json_decode.field("id", Json_decode.string, json),
            /* name */Json_decode.field("name", Json_decode.string, json),
            /* value */Json_decode.field("value", Json_decode.string, json)
          ];
  };
  return Json_decode.field("colors", (function (param) {
                return Json_decode.list(parseColor, param);
              }), parsed);
}

function render(target, colors) {
  if (target !== 0) {
    var colorConstantDoc = function (color) {
      return /* LineComment */Block.__(7, [{
                  comment: color[/* value */2],
                  line: /* ConstantDeclaration */Block.__(3, [{
                        modifiers: /* :: */[
                          /* AccessLevelModifier */Block.__(0, [/* PublicModifier */3]),
                          /* :: */[
                            /* StaticModifier */11,
                            /* [] */0
                          ]
                        ],
                        pattern: /* IdentifierPattern */Block.__(0, [color[/* id */0]]),
                        init: /* Some */[/* LiteralExpression */Block.__(0, [/* Color */Block.__(4, [color[/* value */2]])])]
                      }])
                }]);
    };
    return Render$LonaCompilerCore.Swift[/* toString */9](/* TopLevelDeclaration */Block.__(8, [{
                    statements: /* :: */[
                      /* ImportDeclaration */Block.__(4, ["UIKit"]),
                      /* :: */[
                        /* ClassDeclaration */Block.__(1, [{
                              name: "Colors",
                              body: List.map(colorConstantDoc, colors)
                            }]),
                        /* [] */0
                      ]
                    ]
                  }]));
  } else {
    console.log("Color generation not supported for target", target);
    return "error";
  }
}

exports.parseFile = parseFile;
exports.render    = render;
/* fs Not a pure module */
